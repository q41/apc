package bp bp "http://www.emftext.org/language/ballandpaddle" {
		
	class Root {
		containment reference Level level (1..1);
		containment reference Paddle paddles (1..-1);
		containment reference Ball balls (1..-1);
		containment reference Block blocks (0..-1);
		containment reference Effect effects (0..-1);
		containment reference Power powers (0..-1);
	}

	class Level{
		attribute EString id (1..1);
		attribute EFloat powerSpawnChance (0..1);
		attribute EString blocks (0..-1);
	}
	
	abstract class BPObject{
		attribute EString id (1..1);
	}
	
	class Paddle extends BPObject{	
		attribute EDouble x (1..1);
		attribute EDouble y (1..1);
		attribute EInt size (1..1);
	}
	
	class Ball extends BPObject{
		attribute EDouble x (1..1);
		attribute EDouble y (1..1);
		attribute EInt size (0..1);
		attribute EInt orientation (0..1);
		attribute EInt damage (0..1);
		attribute EInt speed (0..1);
	}
	
	class Block extends BPObject{
		attribute EInt hardness (1..1);
		attribute EInt resistance (0..1);
		reference Power power (0..1);
	}
	
	class Power{
		attribute EString id (1..1);
		reference Effect effects (1..-1);
		attribute EFloat powerSpawnChance (0..1);
	}
	
	abstract class Target{}
	
	class ObjectTarget extends Target{
		reference BPObject object (1..1);
	}
	
	class ClassTarget extends Target{
		attribute BPClassType classType (1..1);
	}	
	
	abstract class Effect{
		attribute EString id (1..1);
		attribute EInt duration(0..1);
	}
	
	class GeneralEffect extends Effect{
		containment reference Target target (1..1);
		containment reference Expression filter (0..1);
		containment reference GeneralEffectBody body (1..1);
	}
	
	class CollisionEffect extends Effect{
		containment reference Target leftTarget (1..1);
		containment reference Expression leftFilter (0..1);
		containment reference Target rightTarget (1..1);
		containment reference Expression rightFilter (0..1);
		containment reference CollisionEffectBody body (1..1);
	}
	
	abstract class EffectBody{
		attribute AdjustmentOperator op (1..1);				
		attribute Attribute name (1..1);
	}
	
	class GeneralEffectBody extends EffectBody{
		containment reference Expression expression (1..1);	
	}
	
	class CollisionEffectBody extends EffectBody{
		containment reference Target target (1..1);
		containment reference CollisionExpression expression (1..1);
	}	
		
	abstract class CollisionExpression{
	}
	
	abstract class BinaryCollisionExpression extends CollisionExpression{
		containment reference CollisionExpression left(1..1);
		containment reference CollisionExpression right(1..1);
	}
	
	abstract class UnaryCollisionExpression extends CollisionExpression{
		containment reference CollisionExpression body(1..1);
	}
	
	class EqCollisionExpression extends BinaryCollisionExpression{}
	
	class SmthCollisionExpression extends BinaryCollisionExpression{}
	
	class SeqCollisionExpression extends BinaryCollisionExpression{}
	
	class LthCollisionExpression extends BinaryCollisionExpression{}
	
	class LeqCollisionExpression extends BinaryCollisionExpression{}
	
	class NeqCollisionExpression extends BinaryCollisionExpression{}
	
	class OrCollisionExpression extends BinaryCollisionExpression{}
	
	class AndCollisionExpression extends BinaryCollisionExpression{}
	
	class MultCollisionExpression extends BinaryCollisionExpression{}
	
	class DivCollisionExpression extends BinaryCollisionExpression {}
	
	class PlusCollisionExpression extends BinaryCollisionExpression{}
	
	class MinusCollisionExpression extends BinaryCollisionExpression{}
	
	class BracketCollisionExpression extends UnaryCollisionExpression{}
	
	class NegCollisionExpression extends UnaryCollisionExpression{}
	
	class NotCollisionExpression extends UnaryCollisionExpression{}
	
	class IntCollisionOperand extends CollisionExpression{
		attribute EInt value (1..1);	
	}
	
	class DoubleCollisionOperand extends CollisionExpression{
		attribute EDouble value (1..1);		
	}
	
	class BoolCollisionOperand extends CollisionExpression{
		attribute EBoolean value (1..1);
	}
	
	class AttCollisionOperand extends CollisionExpression{
		containment reference Target target(1..1);
		attribute Attribute att(1..1);			
	}
	
	abstract class Expression{}
	
	abstract class BinaryExpression extends Expression{
		containment reference Expression left (1..1);
		containment reference Expression right (1..1);
	}
	
	abstract class UnaryExpression extends Expression{
		containment reference Expression body (1..1);
	}
	
	class EqExpression extends BinaryExpression{}
	
	class SmthExpression extends BinaryExpression{}
	
	class SeqExpression extends BinaryExpression{}
	
	class LthExpression extends BinaryExpression{}
	
	class LeqExpression extends BinaryExpression{}
	
	class NeqExpression extends BinaryExpression{}
	
	class OrExpression extends BinaryExpression{}
	
	class AndExpression extends BinaryExpression{}
	
	class MultExpression extends BinaryExpression{}
	
	class DivExpression extends BinaryExpression {}
	
	class PlusExpression extends BinaryExpression{}
	
	class MinusExpression extends BinaryExpression{}
	
	class BracketExpression extends UnaryExpression{}
	
	class NegExpression extends UnaryExpression{}
	
	class NotExpression extends UnaryExpression{}
	
	class AttOperand extends Expression{
		attribute Attribute att (1..1);
	}
	
	class IntOperand extends Expression{
		attribute EInt value(1..1);		
	}
	
	class DoubleOperand extends Expression{
		attribute EDouble value(1..1);		
	}
	
	class BooleanOperand extends Expression{
		attribute EBoolean value (1..1);
	}
	
	serializable enum Attribute{
		1 : Size = "size";
		2 : Orientation = "orientation";
		3 : Speed = "speed";
		4 : Hardness = "hardness";
		5 : Resistance = "resistance";
		6 : Immaterial = "immaterial";
		7 : X = "x";
		8 : Y = "y";
		9 : Damage = "damage";
	}
	
	serializable enum BPClassType{		
		0 : Block = "block";
		1 : Paddle = "paddle";
		2 : Ball = "ball";
	}
	
	serializable enum AdjustmentOperator{
		0 : Inc = "+=";
		1 : Set = "=";	
	}
		
}